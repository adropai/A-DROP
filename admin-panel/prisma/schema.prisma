generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Category {
  id          String     @id @default(cuid())
  name        String
  nameEn      String?
  nameAr      String?
  description String?
  image       String?
  parentId    String?
  priority    Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id              String      @id @default(cuid())
  name            String
  nameEn          String?
  nameAr          String?
  description     String?
  categoryId      String
  price           Float
  discountPrice   Float?
  images          String      @default("[]")
  ingredients     String      @default("[]")
  allergens       String      @default("[]")
  preparationTime Int
  calories        Int?
  nutritionInfo   Json?
  customizations  String      @default("[]")
  availableHours  Json?
  isAvailable     Boolean     @default(true)
  isSpecial       Boolean     @default(false)
  priority        Int         @default(0)
  tags            String      @default("[]")
  rating          Float?      @default(0)
  reviewCount     Int         @default(0)
  soldCount       Int         @default(0)
  department      Department  @default(KITCHEN)  // تعیین بخش مربوطه
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]

  @@index([categoryId])
  @@index([isAvailable])
  @@index([isSpecial])
  @@index([priority])
  @@index([department])
  @@map("menu_items")
}

model Order {
  id              Int             @id @default(autoincrement())
  orderNumber     String          @unique @default(cuid())
  customerName    String?
  customerPhone   String?
  customerAddress String?
  customerId      String?
  status          OrderStatus     @default(PENDING)
  type            OrderType       @default(DINE_IN)
  totalAmount     Float
  paymentMethod   String?
  notes           String?
  tableNumber     Int?
  priority        OrderPriority   @default(NORMAL)
  estimatedTime   Int?            // به دقیقه
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  items           OrderItem[]
  kitchenTickets  KitchenTicket[]

  @@index([status])
  @@index([type])
  @@index([tableNumber])
  @@index([priority])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id              Int             @id @default(autoincrement())
  orderId         Int
  menuItemId      String
  quantity        Int
  price           Float
  notes           String?
  customizations  String?         // JSON برای تغییرات
  allergens       String?         // JSON برای آلرژن‌ها
  preparationTime Int?            // به دقیقه
  createdAt       DateTime        @default(now())
  menuItem        MenuItem        @relation(fields: [menuItemId], references: [id])
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  kitchenTicketItems KitchenTicketItem[]

  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items")
}

// فیش‌های آشپزخانه (هر بخش یک فیش جداگانه)
model KitchenTicket {
  id              String              @id @default(cuid())
  ticketNumber    String              @unique @default(cuid())
  orderId         Int
  department      Department
  status          KitchenStatus       @default(PENDING)
  priority        OrderPriority       @default(NORMAL)
  assignedChef    String?
  tableNumber     Int?
  notes           String?
  estimatedTime   Int?                // به دقیقه
  startedAt       DateTime?
  readyAt         DateTime?
  servedAt        DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items           KitchenTicketItem[]

  @@index([department])
  @@index([status])
  @@index([priority])
  @@index([assignedChef])
  @@index([createdAt])
  @@map("kitchen_tickets")
}

// آیتم‌های فیش آشپزخانه
model KitchenTicketItem {
  id              String          @id @default(cuid())
  kitchenTicketId String
  orderItemId     Int
  quantity        Int
  notes           String?
  status          KitchenItemStatus @default(PENDING)
  preparationTime Int?            // به دقیقه
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime        @default(now())
  kitchenTicket   KitchenTicket   @relation(fields: [kitchenTicketId], references: [id], onDelete: Cascade)
  orderItem       OrderItem       @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([kitchenTicketId])
  @@index([orderItemId])
  @@index([status])
  @@map("kitchen_ticket_items")
}

// Enums
enum OrderStatus {
  PENDING           // در انتظار تأیید
  CONFIRMED         // تأیید شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شده
  CANCELLED         // لغو شده
  COMPLETED         // کامل شده
}

enum OrderType {
  DINE_IN           // حضوری
  TAKEAWAY          // بیرون‌بر
  DELIVERY          // پیک
  RESERVATION       // رزرو
}

enum OrderPriority {
  LOW               // کم
  NORMAL            // عادی
  HIGH              // زیاد
  URGENT            // فوری
}

enum Department {
  KITCHEN           // آشپزخانه
  COFFEE_SHOP       // کافی شاپ
  GRILL             // کباب‌پزی
  DESSERT           // شیرینی‌پزی
  HOOKAH            // قلیون‌سرا
  BAR               // بار
  BAKERY            // نانوایی
  SALAD_BAR         // سالاد بار
}

enum KitchenStatus {
  PENDING           // در انتظار
  ACCEPTED          // پذیرش شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شده
  CANCELLED         // لغو شده
}

enum KitchenItemStatus {
  PENDING           // در انتظار
  ACCEPTED          // پذیرفته شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شد
  CANCELLED         // لغو شد
}

model Customer {
  id          String               @id @default(cuid())
  name        String
  email       String?              @unique
  phone       String               @unique
  avatar      String?
  dateOfBirth String?
  gender      String?
  tier        String               @default("Bronze")
  status      String               @default("Active")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  addresses   CustomerAddress[]
  preferences CustomerPreferences?
  stats       CustomerStats?
  tags        CustomerTag[]

  @@index([phone])
  @@index([email])
  @@index([tier])
  @@index([status])
  @@map("customers")
}

model CustomerAddress {
  id         String   @id @default(cuid())
  customerId String
  title      String
  address    String
  city       String
  district   String?
  postalCode String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("customer_addresses")
}

model CustomerPreferences {
  id                     String   @id @default(cuid())
  customerId             String   @unique
  favoriteItems          String   @default("[]")
  allergies              String   @default("[]")
  dietaryRestrictions    String   @default("[]")
  preferredPaymentMethod String?
  deliveryInstructions   String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  customer               Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model CustomerStats {
  id                String   @id @default(cuid())
  customerId        String   @unique
  totalOrders       Int      @default(0)
  totalSpent        Float    @default(0)
  averageOrderValue Float    @default(0)
  lastOrderDate     String?
  favoriteCategory  String?
  loyaltyPoints     Int      @default(0)
  lifetimeValue     Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_stats")
}

model CustomerTag {
  id         String   @id @default(cuid())
  customerId String
  name       String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("customer_tags")
}

enum TableType {
  INDOOR
  OUTDOOR
  VIP
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DAMAGED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
  RETURN
  WASTE
  EXPIRED
}

enum VehicleType {
  BIKE
  MOTORCYCLE
  CAR
  WALKING
}

enum CourierStatus {
  AVAILABLE
  BUSY
  OFFLINE
  ON_BREAK
}

enum DeliveryType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

enum CampaignType {
  DISCOUNT
  PRODUCT_LAUNCH
  BRAND_AWARENESS
  RETENTION
  ACQUISITION
  SEASONAL
  EVENT
}

enum CampaignCategory {
  SEASONAL
  NEW_PRODUCT
  PROMOTION
  LOYALTY
  REFERRAL
  EMAIL
  SMS
  SOCIAL_MEDIA
  PUSH_NOTIFICATION
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_ONE_GET_ONE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  CASHIER
  KITCHEN_STAFF
  WAITER
  DELIVERY
  SUPPORT
  STAFF
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

enum StaffRole {
  BRANCH_MANAGER
  SHIFT_MANAGER
  CASHIER
  CHEF
  KITCHEN_STAFF
  WAITER
  DELIVERY_STAFF
  CLEANER
  SECURITY
  STAFF
}

model Table {
  id           String        @id @default(cuid())
  number       String        @unique
  name         String?
  capacity     Int
  location     String?
  type         TableType     @default(INDOOR)
  status       TableStatus   @default(AVAILABLE)
  isActive     Boolean       @default(true)
  qrCode       String?
  description  String?
  branchId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id              String            @id @default(cuid())
  tableId         String
  customerName    String
  customerPhone   String
  customerEmail   String?
  reservationDate DateTime
  startTime       DateTime
  endTime         DateTime
  partySize       Int
  status          ReservationStatus @default(PENDING)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  table           Table             @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model InventoryCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  color       String          @default("#1890ff")
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       InventoryItem[]

  @@map("inventory_categories")
}

model InventoryItem {
  id            String             @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  sku           String?            @unique
  unit          String             @default("piece")
  currentStock  Int                @default(0)
  minStock      Int                @default(0)
  maxStock      Int?
  unitPrice     Float              @default(0)
  supplierName  String?
  expiryDate    DateTime?
  status        InventoryStatus    @default(IN_STOCK)
  location      String?
  notes         String?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  category      InventoryCategory  @relation(fields: [categoryId], references: [id])
  movements     StockMovement[]

  @@map("inventory_items")
}

model StockMovement {
  id            String       @id @default(cuid())
  itemId        String
  type          MovementType
  quantity      Int
  unitPrice     Float?
  totalPrice    Float?
  reference     String?
  notes         String?
  userId        String?
  previousStock Int          @default(0)
  newStock      Int          @default(0)
  createdAt     DateTime     @default(now())
  item          InventoryItem @relation(fields: [itemId], references: [id])

  @@map("stock_movements")
}
