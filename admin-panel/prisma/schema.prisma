generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Category {
  id          String     @id @default(cuid())
  name        String
  nameEn      String?
  nameAr      String?
  description String?
  image       String?
  parentId    String?
  priority    Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id              String      @id @default(cuid())
  name            String
  nameEn          String?
  nameAr          String?
  description     String?
  categoryId      String
  price           Float
  discountPrice   Float?
  images          String      @default("[]")
  ingredients     String      @default("[]")
  allergens       String      @default("[]")
  preparationTime Int
  calories        Int?
  nutritionInfo   Json?
  customizations  String      @default("[]")
  availableHours  Json?
  isAvailable     Boolean     @default(true)
  isSpecial       Boolean     @default(false)
  priority        Int         @default(0)
  tags            String      @default("[]")
  rating          Float?      @default(0)
  reviewCount     Int         @default(0)
  soldCount       Int         @default(0)
  department      Department  @default(KITCHEN)  // تعیین بخش مربوطه
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]

  @@index([categoryId])
  @@index([isAvailable])
  @@index([isSpecial])
  @@index([priority])
  @@index([department])
  @@map("menu_items")
}

model Order {
  id              Int             @id @default(autoincrement())
  orderNumber     String          @unique @default(cuid())
  customerName    String?
  customerPhone   String?
  customerAddress String?
  customerId      String?
  status          OrderStatus     @default(PENDING)
  type            OrderType       @default(DINE_IN)
  totalAmount     Float
  tax             Float?          @default(0)
  discountAmount  Float?          @default(0)
  total           Float?
  paymentMethod   String?
  paymentStatus   PaymentStatus   @default(PENDING)
  notes           String?
  tableNumber     Int?
  priority        OrderPriority   @default(NORMAL)
  estimatedTime   Int?            // به دقیقه
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  items           OrderItem[]
  kitchenTickets  KitchenTicket[]
  deliveries      Delivery[]

  @@index([status])
  @@index([type])
  @@index([tableNumber])
  @@index([priority])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id              Int             @id @default(autoincrement())
  orderId         Int
  menuItemId      String
  quantity        Int
  price           Float
  notes           String?
  customizations  String?         // JSON برای تغییرات
  allergens       String?         // JSON برای آلرژن‌ها
  preparationTime Int?            // به دقیقه
  createdAt       DateTime        @default(now())
  menuItem        MenuItem        @relation(fields: [menuItemId], references: [id])
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  kitchenTicketItems KitchenTicketItem[]

  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items")
}

// فیش‌های آشپزخانه (هر بخش یک فیش جداگانه)
model KitchenTicket {
  id              String              @id @default(cuid())
  ticketNumber    String              @unique @default(cuid())
  orderId         Int
  department      Department
  status          KitchenStatus       @default(PENDING)
  priority        OrderPriority       @default(NORMAL)
  assignedChef    String?
  tableNumber     Int?
  notes           String?
  estimatedTime   Int?                // به دقیقه
  startedAt       DateTime?
  readyAt         DateTime?
  servedAt        DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items           KitchenTicketItem[]

  @@index([department])
  @@index([status])
  @@index([priority])
  @@index([assignedChef])
  @@index([createdAt])
  @@map("kitchen_tickets")
}

// آیتم‌های فیش آشپزخانه
model KitchenTicketItem {
  id              String          @id @default(cuid())
  kitchenTicketId String
  orderItemId     Int
  quantity        Int
  notes           String?
  status          KitchenItemStatus @default(PENDING)
  preparationTime Int?            // به دقیقه
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime        @default(now())
  kitchenTicket   KitchenTicket   @relation(fields: [kitchenTicketId], references: [id], onDelete: Cascade)
  orderItem       OrderItem       @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([kitchenTicketId])
  @@index([orderItemId])
  @@index([status])
  @@map("kitchen_ticket_items")
}

// Enums
enum OrderStatus {
  PENDING           // در انتظار تأیید
  CONFIRMED         // تأیید شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شده
  CANCELLED         // لغو شده
  COMPLETED         // کامل شده
  REFUNDED          // بازگشت داده شده
}

enum OrderType {
  DINE_IN           // حضوری
  TAKEAWAY          // بیرون‌بر
  DELIVERY          // پیک
  RESERVATION       // رزرو
}

enum OrderPriority {
  LOW               // کم
  NORMAL            // عادی
  HIGH              // زیاد
  URGENT            // فوری
}

enum PaymentStatus {
  PENDING           // در انتظار پرداخت
  COMPLETED         // پرداخت شده
  PARTIAL           // پرداخت جزئی
  REFUNDED          // بازگشت داده شده
  FAILED            // ناموفق
}

enum Department {
  KITCHEN           // آشپزخانه
  COFFEE_SHOP       // کافی شاپ
  GRILL             // کباب‌پزی
  DESSERT           // شیرینی‌پزی
  HOOKAH            // قلیون‌سرا
  BAR               // بار
  BAKERY            // نانوایی
  SALAD_BAR         // سالاد بار
}

enum KitchenStatus {
  PENDING           // در انتظار
  ACCEPTED          // پذیرش شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شده
  CANCELLED         // لغو شده
}

enum KitchenItemStatus {
  PENDING           // در انتظار
  ACCEPTED          // پذیرفته شده
  PREPARING         // در حال آماده‌سازی
  READY             // آماده
  SERVED            // سرو شد
  CANCELLED         // لغو شد
}

model Customer {
  id          String               @id @default(cuid())
  name        String
  email       String?              @unique
  phone       String               @unique
  avatar      String?
  dateOfBirth String?
  gender      String?
  tier        String               @default("Bronze")
  status      String               @default("Active")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  addresses   CustomerAddress[]
  preferences CustomerPreferences?
  stats       CustomerStats?
  tags        CustomerTag[]

  @@index([phone])
  @@index([email])
  @@index([tier])
  @@index([status])
  @@map("customers")
}

model CustomerAddress {
  id         String   @id @default(cuid())
  customerId String
  title      String
  address    String
  city       String
  district   String?
  postalCode String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("customer_addresses")
}

model CustomerPreferences {
  id                     String   @id @default(cuid())
  customerId             String   @unique
  favoriteItems          String   @default("[]")
  allergies              String   @default("[]")
  dietaryRestrictions    String   @default("[]")
  preferredPaymentMethod String?
  deliveryInstructions   String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  customer               Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model CustomerStats {
  id                String   @id @default(cuid())
  customerId        String   @unique
  totalOrders       Int      @default(0)
  totalSpent        Float    @default(0)
  averageOrderValue Float    @default(0)
  lastOrderDate     String?
  favoriteCategory  String?
  loyaltyPoints     Int      @default(0)
  lifetimeValue     Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_stats")
}

model CustomerTag {
  id         String   @id @default(cuid())
  customerId String
  name       String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("customer_tags")
}

enum TableType {
  INDOOR
  OUTDOOR
  VIP
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DAMAGED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
  RETURN
  WASTE
  EXPIRED
}

enum VehicleType {
  BIKE
  MOTORCYCLE
  CAR
  WALKING
}

enum CourierStatus {
  AVAILABLE
  BUSY
  OFFLINE
  ON_BREAK
}

enum DeliveryType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

enum CampaignType {
  DISCOUNT
  PRODUCT_LAUNCH
  BRAND_AWARENESS
  RETENTION
  ACQUISITION
  SEASONAL
  EVENT
}

enum CampaignCategory {
  SEASONAL
  NEW_PRODUCT
  PROMOTION
  LOYALTY
  REFERRAL
  EMAIL
  SMS
  SOCIAL_MEDIA
  PUSH_NOTIFICATION
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_ONE_GET_ONE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  CASHIER
  KITCHEN_STAFF
  WAITER
  DELIVERY
  SUPPORT
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String     // hashed with bcrypt
  name      String?
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  role      UserRole   @default(STAFF)
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  userPermissions UserPermission[]
  activityLogs    ActivityLog[]
  securityAudits  SecurityAudit[]

  @@map("users")
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

enum StaffRole {
  BRANCH_MANAGER
  SHIFT_MANAGER
  CASHIER
  CHEF
  KITCHEN_STAFF
  WAITER
  DELIVERY_STAFF
  CLEANER
  SECURITY
  STAFF
}

model Table {
  id           String        @id @default(cuid())
  number       String        @unique
  name         String?
  capacity     Int
  location     String?
  type         TableType     @default(INDOOR)
  status       TableStatus   @default(AVAILABLE)
  isActive     Boolean       @default(true)
  qrCode       String?
  description  String?
  branchId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id              String            @id @default(cuid())
  tableId         String
  customerName    String
  customerPhone   String
  customerEmail   String?
  reservationDate DateTime
  startTime       DateTime
  endTime         DateTime
  partySize       Int
  status          ReservationStatus @default(PENDING)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  table           Table             @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model InventoryCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  color       String          @default("#1890ff")
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       InventoryItem[]

  @@map("inventory_categories")
}

model InventoryItem {
  id            String             @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  sku           String?            @unique
  unit          String             @default("piece")
  currentStock  Int                @default(0)
  minStock      Int                @default(0)
  maxStock      Int?
  unitPrice     Float              @default(0)
  supplierName  String?
  expiryDate    DateTime?
  status        InventoryStatus    @default(IN_STOCK)
  location      String?
  notes         String?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  category      InventoryCategory  @relation(fields: [categoryId], references: [id])
  movements     StockMovement[]

  @@map("inventory_items")
}

model StockMovement {
  id            String       @id @default(cuid())
  itemId        String
  type          MovementType
  quantity      Int
  unitPrice     Float?
  totalPrice    Float?
  reference     String?
  notes         String?
  userId        String?
  previousStock Int          @default(0)
  newStock      Int          @default(0)
  createdAt     DateTime     @default(now())
  item          InventoryItem @relation(fields: [itemId], references: [id])

  @@map("stock_movements")
}

// Permission Management Models
model Permission {
  id            String              @id @default(cuid())
  name          String              @unique
  description   String
  module        String              // e.g., "orders", "menu", "staff"
  action        String              // e.g., "read", "write", "delete", "admin"
  resource      String?             // specific resource if needed
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([module, action, resource])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([role, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  granted      Boolean    @default(true)
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String   // DELETE_ORDER, EDIT_ORDER, CREATE_ORDER, etc.
  entityType String   // ORDER, CUSTOMER, MENU_ITEM, etc.
  entityId   String?  // ID of the affected entity
  details    String?  // JSON string with additional details
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("activity_logs")
}

// Security & Backup Models
model SecuritySettings {
  id                  String   @id @default(cuid())
  passwordPolicy      String   // JSON for password policy
  sessionTimeout      Int      @default(30) // minutes
  maxLoginAttempts    Int      @default(5)
  lockoutDuration     Int      @default(15) // minutes
  twoFactorAuth       Boolean  @default(false)
  auditLogging        Boolean  @default(true)
  encryptionLevel     String   @default("basic") // basic, advanced, enterprise
  ipWhitelist         String?  // JSON array of IPs
  dataRetentionDays   Int      @default(90)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("security_settings")
}

model SecurityAudit {
  id          String   @id @default(cuid())
  userId      String
  action      String
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  resource    String
  status      String   @default("success") // success, failed, warning
  details     String?  // JSON for additional details
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("security_audits")
}

model BackupConfig {
  id               String         @id @default(cuid())
  name             String
  schedule         String         // JSON for schedule config
  retentionDays    Int            @default(30)
  compression      Boolean        @default(true)
  encryption       Boolean        @default(true)
  destinations     String         // JSON for backup destinations
  includeFiles     Boolean        @default(true)
  includeDatabases String         // JSON array of database names
  status           String         @default("active") // active, inactive, error
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  backupHistory    BackupHistory[]

  @@map("backup_configs")
}

model BackupHistory {
  id             String       @id @default(cuid())
  configId       String
  startTime      DateTime
  endTime        DateTime?
  status         String       @default("running") // running, completed, failed, cancelled
  size           BigInt       @default(0) // bytes
  location       String?
  error          String?
  filesIncluded  Int          @default(0)
  duration       Int          @default(0) // seconds
  config         BackupConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([startTime])
  @@index([status])
  @@map("backup_history")
}

model SecurityIncident {
  id             String    @id @default(cuid())
  type           String    // suspicious_login, multiple_failures, unauthorized_access, data_breach, malware
  severity       String    @default("medium") // low, medium, high, critical
  timestamp      DateTime  @default(now())
  description    String
  affectedUsers  String?   // JSON array of user IDs
  ipAddress      String?
  status         String    @default("open") // open, investigating, resolved, false_positive
  assignedTo     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([timestamp])
  @@map("security_incidents")
}

// AI Training Models
model AiModel {
  id              String     @id @default(cuid())
  name            String
  type            String     // gpt-4, claude, local, etc.
  status          String     @default("inactive") // active, inactive, training, error
  version         String     @default("1.0.0")
  accuracy        Float      @default(0.0)
  lastTraining    DateTime?
  parameters      String     // JSON for model parameters
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  datasets        AiDataset[]
  predictions     AiPrediction[]

  @@map("ai_models")
}

model AiDataset {
  id              String     @id @default(cuid())
  name            String
  type            String     // training, validation, test
  size            Int        @default(0) // number of records
  format          String     @default("json") // json, csv, txt
  path            String?    // file path or URL
  status          String     @default("pending") // pending, processing, ready, error
  tags            String?    // JSON array of tags
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  modelId         String?
  model           AiModel?   @relation(fields: [modelId], references: [id], onDelete: SetNull)

  @@map("ai_datasets")
}

model AiPrediction {
  id              String     @id @default(cuid())
  modelId         String
  input           String     // JSON for input data
  output          String     // JSON for output data
  confidence      Float      @default(0.0)
  executionTime   Int        @default(0) // milliseconds
  feedback        String?    // user feedback
  rating          Int?       // 1-5 rating
  createdAt       DateTime   @default(now())
  model           AiModel    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([createdAt])
  @@map("ai_predictions")
}

model AiPrompt {
  id              String     @id @default(cuid())
  name            String
  category        String     // system, user, assistant
  content         String     // prompt content
  variables       String?    // JSON array of variables
  version         String     @default("1.0")
  isActive        Boolean    @default(true)
  usage           Int        @default(0) // usage count
  successRate     Float      @default(0.0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("ai_prompts")
}

// Support System Models
model SupportTicket {
  id              String         @id @default(cuid())
  ticketNumber    String         @unique @default(cuid())
  title           String
  description     String
  priority        String         @default("medium") // low, medium, high, urgent
  status          String         @default("open") // open, in_progress, resolved, closed
  category        String         // technical, billing, general, bug_report
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  assignedTo      String?        // staff user ID
  tags            String?        // JSON array of tags
  resolution      String?
  resolvedAt      DateTime?
  closedAt        DateTime?
  estimatedHours  Float?
  actualHours     Float?
  satisfaction    Int?           // 1-5 rating
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  responses       TicketResponse[]
  attachments     TicketAttachment[]

  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("support_tickets")
}

model TicketResponse {
  id              String        @id @default(cuid())
  ticketId        String
  responderId     String?       // user ID who responded
  responderName   String
  responderType   String        @default("staff") // staff, customer, system
  content         String
  isInternal      Boolean       @default(false) // internal note vs customer response
  createdAt       DateTime      @default(now())
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([createdAt])
  @@map("ticket_responses")
}

model TicketAttachment {
  id              String        @id @default(cuid())
  ticketId        String
  fileName        String
  filePath        String
  fileSize        Int           @default(0) // bytes
  mimeType        String?
  uploadedBy      String?       // user ID
  createdAt       DateTime      @default(now())
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@map("ticket_attachments")
}

model SupportKnowledgeBase {
  id              String   @id @default(cuid())
  title           String
  content         String
  category        String
  tags            String?  // JSON array of tags
  isPublished     Boolean  @default(false)
  viewCount       Int      @default(0)
  helpfulVotes    Int      @default(0)
  notHelpfulVotes Int      @default(0)
  authorId        String?
  authorName      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category])
  @@index([isPublished])
  @@index([viewCount])
  @@map("support_knowledge_base")
}

// Delivery System Models
model DeliveryZone {
  id              String     @id @default(cuid())
  name            String
  description     String?
  polygon         String     // JSON array of coordinates
  deliveryFee     Float      @default(0)
  minOrderAmount  Float      @default(0)
  maxOrderAmount  Float?
  estimatedTime   Int        @default(30) // minutes
  isActive        Boolean    @default(true)
  priority        Int        @default(1) // for overlapping zones
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deliveries      Delivery[]

  @@map("delivery_zones")
}

model DeliveryPartner {
  id              String     @id @default(cuid())
  name            String
  phone           String
  email           String?
  licenseNumber   String?
  vehicleType     String     // bike, scooter, car, truck
  vehicleNumber   String?
  status          String     @default("available") // available, busy, offline, suspended
  currentLocation String?    // JSON coordinates
  rating          Float      @default(5.0)
  totalDeliveries Int        @default(0)
  isActive        Boolean    @default(true)
  joinedAt        DateTime   @default(now())
  lastActive      DateTime?
  deliveries      Delivery[]

  @@index([status])
  @@index([isActive])
  @@map("delivery_partners")
}

model Delivery {
  id                 String           @id @default(cuid())
  orderId            Int
  courierId          String?
  deliveryPartnerId  String?
  zoneId             String?
  trackingNumber     String           @unique @default(cuid())
  status             String           @default("PENDING") // PENDING, ASSIGNED, PICKED_UP, IN_TRANSIT, DELIVERED, FAILED, RETURNED, CANCELLED
  priority           String           @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  pickupAddress      String?
  pickupLatitude     Float?
  pickupLongitude    Float?
  deliveryAddress    String?
  deliveryLatitude   Float?
  deliveryLongitude  Float?
  customerName       String?
  customerPhone      String?
  customerNotes      String?
  deliveryFee        Float            @default(0)
  tip                Float            @default(0)
  estimatedDeliveryTime DateTime?
  actualDeliveryTime   DateTime?
  distance           Float?           // kilometers
  assignedAt         DateTime?
  pickedUpAt         DateTime?
  deliveredAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  proofOfDelivery    String?          // photo URL or signature
  rating             Int?             // 1-5 rating from customer
  feedback           String?
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courier            Courier?         @relation(fields: [courierId], references: [id], onDelete: SetNull)
  partner            DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id], onDelete: SetNull)
  zone               DeliveryZone?    @relation(fields: [zoneId], references: [id], onDelete: SetNull)
  trackingUpdates    DeliveryTracking[]

  @@index([status])
  @@index([orderId])
  @@index([deliveryPartnerId])
  @@index([createdAt])
  @@map("deliveries")
}

model DeliveryTracking {
  id           String   @id @default(cuid())
  deliveryId   String
  status       String
  location     String?  // address or description
  latitude     Float?
  longitude    Float?
  notes        String?
  timestamp    DateTime @default(now())
  delivery     Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([timestamp])
  @@map("delivery_tracking")
}

model Courier {
  id                   String    @id @default(cuid())
  name                 String
  phone                String    @unique
  email                String?
  avatar               String?
  vehicleType          String    @default("MOTORCYCLE") // BIKE, MOTORCYCLE, CAR, WALKING
  vehicleDetails       String?   // رنگ، پلاک، مدل
  status               String    @default("AVAILABLE") // AVAILABLE, BUSY, OFFLINE, ON_BREAK
  currentLocation      String?
  currentLatitude      Float?
  currentLongitude     Float?
  isActive             Boolean   @default(true)
  rating               Float     @default(5.0)
  totalDeliveries      Int       @default(0)
  successfulDeliveries Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deliveries           Delivery[]

  @@index([status])
  @@index([isActive])
  @@map("couriers")
}
