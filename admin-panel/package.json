{
  "name": "admin-dashboard",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "prevent:files": "node file-prevention.js",
    "predev:disabled": "node -e \"const fs=require('fs'),path=require('path');const patterns=[/_backup\\./,/_old\\./,/_new\\./,/_simple\\./,/_test\\./,/_copy\\./,/_temp\\./,/_duplicate\\./,/page_backup/,/page_old/,/page_new/,/route_backup/,/route_old/,/route_new/,/route_persian/,/reservation-new/,/test-data/,/test_old\\.tsx/,/test_old\\./];const remove=(dir)=>{if(!fs.existsSync(dir))return;fs.readdirSync(dir).forEach(item=>{const fullPath=path.join(dir,item),stat=fs.statSync(fullPath);if(stat.isDirectory()){if(patterns.some(p=>p.test(item))){fs.rmSync(fullPath,{recursive:true,force:true});console.log('Removed:',fullPath);return}remove(fullPath)}else if(patterns.some(p=>p.test(item))||(stat.size===0&&/\\.(tsx?|jsx?)$/.test(item))){fs.unlinkSync(fullPath);console.log('Removed:',fullPath)}})};['./app','./components','./lib','./hooks','./stores','./types','./scripts'].forEach(remove);console.log('✅ Cleanup completed');\"",
    "prebuild:disabled": "node -e \"const fs=require('fs'),path=require('path');const patterns=[/_backup\\./,/_old\\./,/_new\\./,/_simple\\./,/_test\\./,/_copy\\./,/_temp\\./,/_duplicate\\./,/page_backup/,/page_old/,/page_new/,/route_backup/,/route_old/,/route_new/,/route_persian/,/reservation-new/,/test-data/,/test_old\\.tsx/,/test_old\\./];const remove=(dir)=>{if(!fs.existsSync(dir))return;fs.readdirSync(dir).forEach(item=>{const fullPath=path.join(dir,item),stat=fs.statSync(fullPath);if(stat.isDirectory()){if(patterns.some(p=>p.test(item))){fs.rmSync(fullPath,{recursive:true,force:true});console.log('Removed:',fullPath);return}remove(fullPath)}else if(patterns.some(p=>p.test(item))||(stat.size===0&&/\\.(tsx?|jsx?)$/.test(item))){fs.unlinkSync(fullPath);console.log('Removed:',fullPath)}})};['./app','./components','./lib','./hooks','./stores','./types','./scripts'].forEach(remove);console.log('✅ Build cleanup completed');\"",
    "prestart": "node -e \"const fs=require('fs'),path=require('path');const patterns=[/_backup\\./,/_old\\./,/_new\\./,/_simple\\./,/_test\\./,/_copy\\./,/_temp\\./,/_duplicate\\./,/page_backup/,/page_old/,/page_new/,/route_backup/,/route_old/,/route_new/,/route_persian/,/reservation-new/,/test-data/,/test_old\\.tsx/,/test_old\\./];const remove=(dir)=>{if(!fs.existsSync(dir))return;fs.readdirSync(dir).forEach(item=>{const fullPath=path.join(dir,item),stat=fs.statSync(fullPath);if(stat.isDirectory()){if(patterns.some(p=>p.test(item))){fs.rmSync(fullPath,{recursive:true,force:true});console.log('Removed:',fullPath);return}remove(fullPath)}else if(patterns.some(p=>p.test(item))||(stat.size===0&&/\\.(tsx?|jsx?)$/.test(item))){fs.unlinkSync(fullPath);console.log('Removed:',fullPath)}})};['./app','./components','./lib','./hooks','./stores','./types','./scripts'].forEach(remove);console.log('✅ Start cleanup completed');\"",
    "dev": "next dev",
    "dev:turbo": "next dev --turbo",
    "dev:legacy": "next dev",
    "build": "next build",
    "build:prod": "NODE_ENV=production next build",
    "start": "next start",
    "start:prod": "NODE_ENV=production next start",
    "lint": "next lint",
    "analyze": "ANALYZE=true npm run build",
    "analyze:server": "npm run build && npx next-bundle-analyzer",
    "optimize": "npm run lint && npm run build:prod",
    "perf": "npm run build:prod && npm run start:prod",
    "cache:clear": "rm -rf .next",
    "deps:update": "npm update",
    "deps:audit": "npm audit",
    "size": "npm run build && du -sh .next",
    "monitor:files": "node file-monitor.js",
    "scan:duplicates": "node duplicate-detector.js",
    "clean:duplicates": "node duplicate-detector.js && echo 'Run the suggested commands to clean up'",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "jest --ci --coverage --watchAll=false",
    "test:update": "jest --updateSnapshot"
  },
  "dependencies": {
    "@ant-design/icons": "^5.5.1",
    "@ant-design/plots": "^2.6.3",
    "@ant-design/pro-components": "^2.8.1",
    "@hookform/resolvers": "^5.2.1",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.13.0",
    "@tanstack/react-query": "^4.36.1",
    "@types/bcrypt": "^6.0.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/moment-jalaali": "^0.7.9",
    "@types/pdfkit": "^0.17.2",
    "@types/qrcode": "^1.5.5",
    "@types/speakeasy": "^2.0.10",
    "antd": "^5.22.2",
    "antd-jalali": "^2.0.1",
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "chart.js": "^4.5.0",
    "classnames": "^2.5.1",
    "dayjs": "^1.11.13",
    "i18next": "^23.16.4",
    "jose": "^6.0.12",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "moment-jalaali": "^0.10.4",
    "next": "14.2.15",
    "next-auth": "^4.24.11",
    "pdfkit": "^0.17.1",
    "prisma": "^6.13.0",
    "qrcode": "^1.5.4",
    "react": "18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "18.3.1",
    "react-hook-form": "^7.62.0",
    "react-i18next": "^13.5.0",
    "react-to-print": "^3.1.1",
    "recharts": "^3.1.2",
    "speakeasy": "^2.0.0",
    "swr": "^2.3.4",
    "zod": "^3.25.76",
    "zustand": "^4.5.5"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@next/bundle-analyzer": "^15.4.5",
    "@next/env": "^15.4.5",
    "@testing-library/jest-dom": "^6.7.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/jest": "^30.0.0",
    "@types/lodash": "^4.17.20",
    "@types/node": "^20.19.10",
    "@types/react": "^18.3.17",
    "@types/react-dom": "^18.3.5",
    "autoprefixer": "^10.4.20",
    "babel-jest": "^30.0.5",
    "critters": "^0.0.23",
    "eslint": "^8.57.1",
    "eslint-config-next": "14.2.15",
    "jest": "^30.0.5",
    "jest-environment-jsdom": "^30.0.5",
    "postcss": "^8.4.49",
    "prettier": "^3.3.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.6.3"
  }
}
